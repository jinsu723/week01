1. 컴퓨터 언어의 저급언어와 고급언어의 차이를 설명하세요.
	저급언어는 컴퓨터가 이해하기 쉬운 형태로 만들어 졌으며 배우는 것과 유지보수가 어렵고 기계어, 어셈블리어 등이 있다.
	반면 고급언어는 일상 언어에서 사용하는 표현을 가져다 쓰기 때문에 사람이 이해하기 쉬운 형태로 만들어져 있고 배우는 것과 유지보수가 비교적 쉽다.
	고급언어에는 Java, Python 등이 있다.
	고급언어는 컴파일러나 인터프리터와 같은 번역 프로그램을 통해 저급언어로 바꿔서 컴퓨터와 소통을 해야 하기 때문에 실행 속도가 비교적 느리다.
	저급언어는 번역 프로그램 사용 없이 바로 컴퓨터에 신호를 보내는 것이 가능하기때문에 실행 속도가 빠르다.
	하지만 저급언어는 운영체제에 따라 사용하는 언어가 다르기 때문에 이식성이 낮고, 고급언어는 번역 프로그램을 사용하기 때문에 이식성이 높다.

2. jvm, jre, jdk에 대해 아는대로 설명하고 설치한 것은 어떤 것인지, 왜 그것을 설치했는지 설명하세요.
	java는 운영체제에 영향을 받지 않고 실행되는데 이를 가능하게 해주는 것이 jvm이다.
	사람이 만든 .java파일을 jdk 안에 있는 java 컴파일러가 .class 파일로 만들어 준다.
	여기서 jvm이 .class파일을 컴퓨터가 이해헐 수 있는 기계언어로 해석해 주어서 실행이 가능하도록 만들어 준다.

	jre는 jvm을 포함하고 있으며 java프로그램을 실행하는데 필요한 라이브러리 파일 등을 가지고 있다.

	jdk는 jvm과 jre 모두를 포함하고 있으며 jre에 있는 도구들 외의 도구들을 가지고 있다.

	이번에 설치한 것은 jdk17 인데 java 파일을 생성, 실행, 컴파일을 모두 할 수 있다.

3. 자바프로젝트의 동작원리를 일반 프로젝트와 비교하여 설명하세요.
	일반 프로젝트는 os의 영향을 받아 프로그램이 실행되면 운영체제를 거쳐 하드웨어에 신호가 가는 방식이다.
	java 프로젝트는 프로그램과 os 사이에 jvm이 존재하여 운영체제와 소통하여 os가 프로그램을 이해할 수 있도록 도와준다.
	때문에 java프로젝트는 os의 영향을 받지 않고 프로그램이 실행될 수 있다.
	이는 이식성이 높다는 것을 의미한다.

4. 이클립스에서 java 코드를 작성하고 실행하는 단계까지에 대해 아는대로 자세히 설명하세요.
	이클립스에서 java 코드를 작성하고 실행하면 먼저 jdk에 있는 컴파일러가 .java파일을 .class파일로 바꿔준다.
	.class 파일은 bytecode로 구성되어 있고 jvm이 bytecode를 os가 이해할 수 있는 언어로 바꿔준다.
	신호를 받은 os는 프로그램을 실행시킨다.

5. git과 git-hub의 차이와 왜 써야 하는지 이유를 설명하세요.
	git은 파일들의 버전을 관리하는 프로그램의 일종이다.
	반면 git-hub는 git을 저장하고 공유할 수 있는 서버를 제공하는 사이트이다.	
	git과 git-hub를 사용하면 다른 pc에서도 버전을 관리하기 용이하고 git을 다른 사람들과 공유할 수 있어 다른 개발자들과 협업을 하기에도 좋다.

6. git의 명령어와 의미를 아는대로 작성하세요.
	git config --global user.name "깃허브이름"
	git config --global user.email "이메일@주소"
		git은 git-hub와 함께 하용하기 때문에 닉네임과 계정을 동일하게 사용해야 하는데 git --global은 닉네임과 계정을 설정해주는 명령어이다.

	git config --list
		내 pc의 현제 git 설정 상태를 확인할 수 있다.

	git init
		현제 위치의 폴더를 git저장소로 만든다. .git숨김 폴더가 만들어 지는 것을 확인해야 한다.

	git status
		현제 git 저장소의 파일들의 상태를 조회한다.

	git add . or 파일명
		현제 git 저장소에 있는 파일들을 working directory에서 staging area로 옮긴다.
		.을 쓰면 git 저장소의 모든 파일을을 의미하고 파일명을 따로 쓰면 개별로 staging area로 옮기는 것이 가능하다.

	git commit -m "메시지"
		staging area의 파일을들의 변경사항을 확정짓고 새로운 버전을 local repository에 올린다.
		커밋메시지를 적어두면 어떤 수정사항이 있었는지 알 수 있고 버전을 되돌릴 때 어느 시점으로 갈 지 알아보기 편리하다.

	git log
		git에 저장된 커밋 기록을 조회할 수 있다. 가장 최근의 기록부터 상단에 출력된다.
		출력 결과의 commit 뒤에 붙는 16진수 해시코드는 해당 commit id 또는 체크섬이라고 부른다.
		author와 date가 함께 나와서 언제 누가 무엇을 했는지 모두 조회가 가능하다.

	git log--pretty=oneline
		커밋 기록을 한 줄로 간단하게 조회할 수 있다.

	git checkout 체크섬 or 브랜치 이름 or -
		파일을 원하는 시점으로 되돌려 놓는 명령어이다. log를 통해 확인한 체크섬 앞 7자리를 입력하여 해당 시점으로 이동이 가능하며
		체크섬대신 -를 입력하면 가장 최근 시점으로 돌아가는 것이 가능하다.

	git rm --cached <file>
		git 저장소에서 커밋을 한 번도 하지 않은 상태에서 사용이 가능하며 track 파일을 untracked 상태로 만든다.

	git restore --staged <file>
		git 저장소에서 한 번 이상 커밋이 된 상태에서 사용하며 track 파일을 untracked 상태로 만든다.

	reset 명령어
		보통 커밋을 취소하는 용도로 사용되고 staged 상태의 파일을 unstaged상태로 변경할 때도 사용이 가능하다.

	git branch
		현제 로컬의 브랜치들을 확인한다.

	git branch -m 기존이름 변경할이름
		기존이름의 브랜치를 변경할이름의 브랜치로 변경한다.

	git branch -D 브랜치명
		브랜치명의 브랜치를 삭제한다.

	git remote add 원격저장소이름 git-hub주소
		원격저장소와 로컬을 연결해주는 명령어이다. 원격저장소이름은 보통 origin을 사용한다.

	git remote -v
		원격저장소와 로컬의 연결 상태를 확인한다.

	git pull 원격저장소이름 브랜치이름
		원격저장소에 있는 파일을 로컬저장소로 가져온다.

	git push 원격저장소이름 브랜치이름
		로컬저장소에 있는 파일을 원격저장소에 올린다.
	
	git pull 원격저장소이름 브랜치이름 --allow-unrelated-histoies
		두 저장소의 히스토리를 강제로 병합하는 명령어.
		강제로 병합하면 문제가 발생할 우려가 있기 때문에 파일을 백업 해두고 하는 것이 좋다.

	git clone 원격저장소이름 저장할경로
		원격저장소의 전체 복사본을 저장할경로에 만든다.
		새로운 디렉토리가 생성되며 그 안에는 원격저장소의 모든 파일, 커밋 히스토리가 포함된다.
		clone 을 사용할 때는 git init을 사용하지 않는다.

	git remot remove 원격저장소이름
		원격저장소와 연결을 끊는다.

	git commit --amend
		가장 마지막에 커밋한 내용을 수정할 수 있다.
		vi에디터로 이동하게 되며 i로 현제 커서에서 입력, o로 아래줄에 입력을 할 수 있다.	
		메시지 수정 후 esc + wq로 저장하고 나온다.

	git push --force 브랜치이름
		push한 커밋 메시지를 수정할 수 있다.

7. git의 4단계 구조에 대해 설명하세요.
	git은 4가지 구조로 이루어져 있는데 로컬 영역에 3개 원격에 1개가 있다.
	로컬에는 working directory, staging area, local repository로 이루어져 있는데
	working directory는 파일을 만들고 수정, 삭제하는 작업 공간이다. 이 공간에 있는 파일들은 git의 관리대상이 아니며 untracked상태에 있다고 한다.
	staging area부터는 git의 관리 대상이며 이 공간에서 파일을 검토하고 커밋하여 local repository로 올린다.
	이 때의 파일의 상태는 tracked상태이다.
	local repository는 커밋이 된 상태의 파일이 로컬 저장소에 저장되며 새로운 버전을 만든 것이다.
	원격에 있는 remote repository는 git-hub와 같은 원격 저장소에 파일을 올려놓고 사용, 공유하는 공간이다.